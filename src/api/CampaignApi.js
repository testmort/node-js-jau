/**
 * ViaNett Integration API
 * api.vianett.io
 *
 * OpenAPI spec version: v6
 * Contact: api@vianett.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Campaign', 'model/Keyword'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Campaign'), require('../model/Keyword'));
  } else {
    // Browser globals (root is window)
    if (!root.ViaNettIntegrationApi) {
      root.ViaNettIntegrationApi = {};
    }
    root.ViaNettIntegrationApi.CampaignApi = factory(root.ViaNettIntegrationApi.ApiClient, root.ViaNettIntegrationApi.Campaign, root.ViaNettIntegrationApi.Keyword);
  }
}(this, function(ApiClient, Campaign, Keyword) {
  'use strict';

  /**
   * Campaign service.
   * @module api/CampaignApi
   * @version v6
   */

  /**
   * Constructs a new CampaignApi. 
   * @alias module:api/CampaignApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the campaignByIdDelete operation.
     * @callback module:api/CampaignApi~campaignByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete campaign
     * @param {Integer} id 
     * @param {module:api/CampaignApi~campaignByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignByIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling campaignByIdDelete";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaign/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignByIdGet operation.
     * @callback module:api/CampaignApi~campaignByIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get campaign
     * @param {Integer} id CampaignID
     * @param {module:api/CampaignApi~campaignByIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    this.campaignByIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling campaignByIdGet";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaign/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignByIdKeywordsGet operation.
     * @callback module:api/CampaignApi~campaignByIdKeywordsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Keyword>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List keywords for campaign
     * @param {Integer} id 
     * @param {module:api/CampaignApi~campaignByIdKeywordsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Keyword>}
     */
    this.campaignByIdKeywordsGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling campaignByIdKeywordsGet";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Keyword];

      return this.apiClient.callApi(
        '/campaign/{id}/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignByIdPut operation.
     * @callback module:api/CampaignApi~campaignByIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update campaign
     * @param {Integer} id CampaignID
     * @param {Object} opts Optional parameters
     * @param {module:model/Campaign} opts.value 
     * @param {module:api/CampaignApi~campaignByIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignByIdPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling campaignByIdPut";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaign/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignGet operation.
     * @callback module:api/CampaignApi~campaignGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Campaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List campaigns
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.companyId Default is current account
     * @param {module:api/CampaignApi~campaignGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Campaign>}
     */
    this.campaignGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'companyId': opts['companyId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Campaign];

      return this.apiClient.callApi(
        '/campaign', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignPost operation.
     * @callback module:api/CampaignApi~campaignPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/Campaign} opts.value 
     * @param {module:api/CampaignApi~campaignPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['value'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
